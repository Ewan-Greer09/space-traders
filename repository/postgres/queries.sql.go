// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: queries.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAPIKey = `-- name: CreateAPIKey :exec
INSERT INTO
    api_keys (key, u_id)
SELECT $1, user_uid
FROM players
WHERE
    username = $2
`

type CreateAPIKeyParams struct {
	Key      pgtype.Text
	Username pgtype.Text
}

func (q *Queries) CreateAPIKey(ctx context.Context, arg CreateAPIKeyParams) error {
	_, err := q.db.Exec(ctx, createAPIKey, arg.Key, arg.Username)
	return err
}

const createSystem = `-- name: CreateSystem :one
INSERT INTO
    systems (
        symbol, sector_symbol, type, x, y
    )
VALUES ($1, $2, $3, $4, $5) RETURNING symbol
`

type CreateSystemParams struct {
	Symbol       pgtype.Text
	SectorSymbol pgtype.Text
	Type         pgtype.Text
	X            pgtype.Int4
	Y            pgtype.Int4
}

func (q *Queries) CreateSystem(ctx context.Context, arg CreateSystemParams) (pgtype.Text, error) {
	row := q.db.QueryRow(ctx, createSystem,
		arg.Symbol,
		arg.SectorSymbol,
		arg.Type,
		arg.X,
		arg.Y,
	)
	var symbol pgtype.Text
	err := row.Scan(&symbol)
	return symbol, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO
    players (
        user_uid, username, password, email, created_at
    )
VALUES ($1, $2, $3, $4, $5) RETURNING user_uid
`

type CreateUserParams struct {
	UserUid   pgtype.Text
	Username  pgtype.Text
	Password  pgtype.Text
	Email     pgtype.Text
	CreatedAt pgtype.Timestamp
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (pgtype.Text, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.UserUid,
		arg.Username,
		arg.Password,
		arg.Email,
		arg.CreatedAt,
	)
	var user_uid pgtype.Text
	err := row.Scan(&user_uid)
	return user_uid, err
}

const getAll = `-- name: GetAll :many
SELECT id, user_uid, username, password, email, created_at FROM players
`

func (q *Queries) GetAll(ctx context.Context) ([]Player, error) {
	rows, err := q.db.Query(ctx, getAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Player
	for rows.Next() {
		var i Player
		if err := rows.Scan(
			&i.ID,
			&i.UserUid,
			&i.Username,
			&i.Password,
			&i.Email,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOneByUsername = `-- name: GetOneByUsername :one
SELECT id, user_uid, username, password, email, created_at FROM players WHERE username = $1
`

func (q *Queries) GetOneByUsername(ctx context.Context, username pgtype.Text) (Player, error) {
	row := q.db.QueryRow(ctx, getOneByUsername, username)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.UserUid,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const getSystemBySymbol = `-- name: GetSystemBySymbol :one
SELECT id, symbol, sector_symbol, type, x, y FROM systems WHERE symbol = $1
`

func (q *Queries) GetSystemBySymbol(ctx context.Context, symbol pgtype.Text) (System, error) {
	row := q.db.QueryRow(ctx, getSystemBySymbol, symbol)
	var i System
	err := row.Scan(
		&i.ID,
		&i.Symbol,
		&i.SectorSymbol,
		&i.Type,
		&i.X,
		&i.Y,
	)
	return i, err
}

const getUserWithAPIKeyByUsername = `-- name: GetUserWithAPIKeyByUsername :one
SELECT pl.id, pl.user_uid, pl.username, pl.password, pl.email, pl.created_at, ak.key
FROM players pl
    JOIN api_keys ak ON pl.user_uid = ak.u_id
WHERE
    pl.username = $1
`

type GetUserWithAPIKeyByUsernameRow struct {
	ID        int32
	UserUid   pgtype.Text
	Username  pgtype.Text
	Password  pgtype.Text
	Email     pgtype.Text
	CreatedAt pgtype.Timestamp
	Key       pgtype.Text
}

func (q *Queries) GetUserWithAPIKeyByUsername(ctx context.Context, username pgtype.Text) (GetUserWithAPIKeyByUsernameRow, error) {
	row := q.db.QueryRow(ctx, getUserWithAPIKeyByUsername, username)
	var i GetUserWithAPIKeyByUsernameRow
	err := row.Scan(
		&i.ID,
		&i.UserUid,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.CreatedAt,
		&i.Key,
	)
	return i, err
}
