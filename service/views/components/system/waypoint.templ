package system

import "space-traders/service/views/components/shared"
import "fmt"
import "time"
import openAPI "github.com/UnseenBook/spacetraders-go-sdk"

templ WaypointPage(symbol string) {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<title>System</title>
		</head>
		<script src="https://unpkg.com/htmx.org@1.9.10" integrity="sha384-D1Kt99CQMDuVetoL1lrYwg5t+9QdHe7NLX/SoJYkXDFfX37iInKRy5xLSi8nO7UC" crossorigin="anonymous"></script>
		<link
			rel="stylesheet"
			href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200"
		/>
		<script src="https://go-echarts.github.io/go-echarts-assets/assets/echarts.min.js" class="htmx-settling"></script>
		<link rel="preconnect" href="https://fonts.googleapis.com"/>
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin/>
		<link
			href="https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300..800;1,300..800&display=swap"
			rel="stylesheet"
		/>
		<link rel="stylesheet" href="/static/css/shared.css"/>
		<body>
			<header hx-get="/com/header" hx-swap="outerHTML" hx-trigger="load">
				<!-- populated with an hx-get request to the server -->
			</header>
			@WaypointContent(symbol)
			@shared.Footer()
		</body>
	</html>
}

templ WaypointContent(symbol string) {
	<main>
		<div class="sys-info" hx-get={ fmt.Sprintf("/system/waypoint/%s/info", symbol) } hx-trigger="load" hx-swap="outerHTML">
			// populated with hx-get
			Loading...
		</div>
	</main>
}

templ WaypointInfo(info openAPI.Waypoint) {
	<div class="sys-info">
		<h1><b>Waypoint: </b> { info.Symbol }</h1>
		<p>
			{ fmt.Sprint(info.Type) }, ({ fmt.Sprint(info.X) }, { fmt.Sprint(info.Y) }),
			for _, oribital := range info.GetOrbitals() {
				if oribital.Symbol != "" {
					{ fmt.Sprint(oribital.Symbol) }
				} else {
					None
				}
			}
			,
			{ fmt.Sprint(info.GetSymbol()) }
		</p>
		<p>
			<b>Orbits: </b>
			if len(info.GetOrbits()) > 0 {
				{ fmt.Sprint(info.GetOrbits()) }
			} else {
				None
			}
		</p>
		<p><b>factions: </b>{ fmt.Sprint(info.GetFaction().Symbol) }</p>
		<div class="traits-container">
			<h2>Traits:</h2>
			for _, trait := range info.GetTraits() {
				<p><b>{ fmt.Sprint(trait.Name) }</b></p>
				<p>{ fmt.Sprint(trait.Description) }</p>
			}
		</div>
		<div class="modifiers-container">
			<h2>Modifiers:</h2>
			for _, modifier := range info.GetModifiers() {
				<p><b>{ fmt.Sprint(modifier.Name) }</b></p>
				<p>{ fmt.Sprint(modifier.Description) }</p>
			}
		</div>
		if chart, ok := info.GetChartOk(); ok {
			<p><b>Submitted by: </b>{ fmt.Sprint(chart.GetSubmittedBy()) }</p>
			<p><b>Submitted On: </b>{ chart.GetSubmittedOn().Format(time.RFC850) }</p>
		} else {
			<p>Chart not found</p>
		}
		<p>
			<b>Under Construction: </b>
			if info.GetIsUnderConstruction() {
				Yes
			} else {
				No
			}
		</p>
	</div>
}
