package system

import "fmt"
import "space-traders/service/views/components/shared"
import openAPI "github.com/UnseenBook/spacetraders-go-sdk"

templ Page() {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<title>System</title>
		</head>
		<script src="https://unpkg.com/htmx.org@1.9.10" integrity="sha384-D1Kt99CQMDuVetoL1lrYwg5t+9QdHe7NLX/SoJYkXDFfX37iInKRy5xLSi8nO7UC" crossorigin="anonymous"></script>
		<link
			rel="stylesheet"
			href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200"
		/>
		<script src="https://go-echarts.github.io/go-echarts-assets/assets/echarts.min.js" class="htmx-settling"></script>
		<link rel="preconnect" href="https://fonts.googleapis.com"/>
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin/>
		<link
			href="https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300..800;1,300..800&display=swap"
			rel="stylesheet"
		/>
		<link rel="stylesheet" href="/static/css/shared.css"/>
		<body>
			<header hx-get="/com/header" hx-swap="outerHTML" hx-trigger="load">
				<!-- populated with an hx-get request to the server -->
			</header>
			@Content()
			@shared.Footer()
		</body>
	</html>
}

templ Content() {
	<main>
		<h1>System</h1>
		<div id="system-locations" hx-get="/system/locations" hx-swap="outerHTML" hx-trigger="load" hx-target="this">
			<!-- populated with an hx-get request to the server -->
			loading...
		</div>
		<div id="system-info" hx-get="/system/info" hx-swap="outerHTML" hx-trigger="load" hx-target="this">
			<!-- populated with an hx-get request to the server -->
			loading...
		</div>
	</main>
}

templ SystemInfo(sysinfo openAPI.System) {
	<div>
		<h2>System Info</h2>
		<div id="system-info">
			<div class="sector-info">
				<p><b>Name:</b> { sysinfo.Symbol }</p>
				<p><b>Location:</b> { sysinfo.SectorSymbol }</p>
				<p><b>Coordinates:</b> { fmt.Sprint(sysinfo.X) }, { fmt.Sprint(sysinfo.Y) }</p>
				<p><b>Type:</b> { fmt.Sprint(sysinfo.Type) }</p>
			</div>
			<div class="waypoints-container">
				<div id="waypoints">
					<button hx-get="/system/waypoints" hx-trigger="click" hx-target="#waypoints" hx-swap="outerHTML">Get System Waypoints ( { fmt.Sprint(len(sysinfo.Waypoints)) } )</button>
				</div>
			</div>
			for _, faction := range sysinfo.Factions {
				{ fmt.Sprint(faction) }
			}
		</div>
	</div>
}

templ Waypoint(waypoint openAPI.SystemWaypoint) {
	<a href={ templ.SafeURL(fmt.Sprintf("/system/waypoint/%s", waypoint.Symbol)) } class="card">
		<div class="card-content">
			<img src={ fmt.Sprintf("/static/img/%s.png", waypoint.Type) } alt={ fmt.Sprint(waypoint.Type) } class="icon" title={ fmt.Sprint(waypoint.Type) }/>
			<p><b>{ fmt.Sprint(waypoint.Symbol) }</b></p>
			<p>{ fmt.Sprint(waypoint.X) }, { fmt.Sprint(waypoint.Y) }</p>
			<p><b>Orbitals:</b> { fmt.Sprint(len(waypoint.Orbitals)) }</p>
			<p>
				<b>Orbits:</b>
				if waypoint.Orbits != nil {
					{ fmt.Sprint(*waypoint.Orbits) }
				} else {
					None
				}
			</p>
		</div>
	</a>
}

templ WaypointList(waypoints []openAPI.SystemWaypoint) {
	for _, waypoint := range waypoints {
		@Waypoint(waypoint)
	}
}

templ SystemLocations(chart templ.Component) {
	<h2>System Locations</h2>
	<div id="system-locations">
		@chart
	</div>
}
