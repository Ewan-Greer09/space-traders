package fleet

import "fmt"
import "space-traders/service/views/components/shared"
import openAPI "github.com/UnseenBook/spacetraders-go-sdk"

templ Page() {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<title>Fleet</title>
		</head>
		<script src="https://unpkg.com/htmx.org@1.9.10" integrity="sha384-D1Kt99CQMDuVetoL1lrYwg5t+9QdHe7NLX/SoJYkXDFfX37iInKRy5xLSi8nO7UC" crossorigin="anonymous"></script>
		<link
			rel="stylesheet"
			href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200"
		/>
		<link rel="preconnect" href="https://fonts.googleapis.com"/>
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin/>
		<link
			href="https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300..800;1,300..800&display=swap"
			rel="stylesheet"
		/>
		<link rel="stylesheet" href="/static/css/shared.css"/>
		<body>
			<header hx-get="/com/header" hx-swap="outerHTML" hx-trigger="load">
				<!-- populated with an hx-get request to the server -->
			</header>
			@Content()
			@shared.Footer()
		</body>
	</html>
}

templ Content() {
	<main>
		<h1>Fleet Data</h1>
		<div id="fleet-container" hx-get="/fleet/list" hx-swap="outerHTML" hx-target="#fleet-container" hx-trigger="load">
			<b>Loading...</b>
		</div>
	</main>
}

templ Fleet(fleet openAPI.GetMyShips200Response) {
	<div class="table-container">
		<table>
			<thead>
				<tr>
					<th>Symbol</th>
					<th>Registration</th>
					<th>Nav</th>
					<th>Crew</th>
					<th>Frame</th>
					<th>Reactor</th>
					<th>Engine</th>
					<th>Cooldown</th>
					<th>Cargo</th>
					<th>Fuel</th>
				</tr>
			</thead>
			<tbody>
				for _, ship := range fleet.Data {
					<tr>
						<td><a href={ templ.SafeURL(fmt.Sprintf("/fleet/ship/%s", ship.GetSymbol())) }>{ ship.GetSymbol() }</a></td>
						<td>
							<p>{ fmt.Sprint(ship.GetRegistration().Name) } ({ fmt.Sprint(ship.GetRegistration().Role) })</p>
						</td>
						<td>
							if ship.Nav.Status != "IN_TRANSIT" {
								<p>{ fmt.Sprint(ship.Nav.WaypointSymbol) }</p>
								<p>{ fmt.Sprint(ship.Nav.Status) }</p>
							} else {
								<p>
									{ fmt.Sprint(ship.Nav.WaypointSymbol) }
									<span class="material-symbols-outlined">
										arrow_forward
									</span>
									{ fmt.Sprint(ship.Nav.Route.Destination.Symbol) }
								</p>
								<p>{ fmt.Sprint(ship.Nav.Status) }</p>
							}
						</td>
						<td>
							<p>{ fmt.Sprint(ship.GetCrew().Current) } / { fmt.Sprint(ship.GetCrew().Capacity) }</p>
							<meter min="0" low="0" high={ fmt.Sprint((ship.GetCrew().Capacity / 10) * 9) } max={ fmt.Sprint(ship.GetCrew().Capacity) } optimum={ fmt.Sprint(ship.GetCrew().Capacity / 2) } value={ fmt.Sprint(ship.GetCrew().Current) }>{ fmt.Sprint(ship.GetCrew().Current) }/{ fmt.Sprint(ship.GetCrew().Capacity) }</meter>
						</td>
						<td>{ fmt.Sprint(ship.GetFrame().Name) }</td>
						<td>{ fmt.Sprint(ship.GetReactor().Name) }</td>
						<td>{ fmt.Sprint(ship.GetEngine().Name) }</td>
						<td>{ fmt.Sprint(ship.GetCooldown().RemainingSeconds) } seconds</td>
						<td>
							<meter min="0" low="0" high={ fmt.Sprint(ship.GetCargo().Capacity) } max={ fmt.Sprint(ship.GetCargo().Capacity) } optimum={ fmt.Sprint((ship.GetCargo().Capacity / 10) * 8) } value={ fmt.Sprint(ship.GetCargo().Units) }>{ fmt.Sprint(ship.GetCargo().Units) }/{ fmt.Sprint(ship.GetCargo().Capacity) }</meter>
							for _, good := range ship.Cargo.GetInventory() {
								<p><b>Good: </b>{ fmt.Sprint(good.GetSymbol()) }</p>
								<p><b>Quantity: </b>{ fmt.Sprint(good.GetUnits()) } / { fmt.Sprint(ship.Cargo.GetCapacity()) }</p>
							}
						</td>
						<td>
							<meter min="0" low={ fmt.Sprint(ship.GetFuel().Capacity / 3) } max={ fmt.Sprint(ship.GetFuel().Capacity) } high={ fmt.Sprint(ship.GetFuel().Capacity) } optimum={ fmt.Sprint((ship.GetFuel().Capacity / 10) * 8) } value={ fmt.Sprint(ship.GetFuel().Current) }>{ fmt.Sprint(ship.GetFuel().Current) }/{ fmt.Sprint(ship.GetFuel().Capacity) }</meter>
						</td>
					</tr>
				}
			</tbody>
		</table>
	</div>
}
