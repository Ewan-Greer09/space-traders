package ship

import "fmt"
import "space-traders/service/views/components/shared"
import openAPI "github.com/UnseenBook/spacetraders-go-sdk"

templ Page(ship openAPI.GetMyShip200Response) {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<title>Fleet</title>
		</head>
		<script src="https://unpkg.com/htmx.org@1.9.10" integrity="sha384-D1Kt99CQMDuVetoL1lrYwg5t+9QdHe7NLX/SoJYkXDFfX37iInKRy5xLSi8nO7UC" crossorigin="anonymous"></script>
		<link
			rel="stylesheet"
			href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200"
		/>
		<link rel="preconnect" href="https://fonts.googleapis.com"/>
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin/>
		<link
			href="https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300..800;1,300..800&display=swap"
			rel="stylesheet"
		/>
		<link rel="stylesheet" href="/static/shared.css"/>
		<body>
			<header hx-get="/com/header" hx-swap="outerHTML" hx-trigger="load">
				<!-- populated with an hx-get request to the server -->
				// 3rd party API call means that the header must be loaded async
			</header>
			@ShipContent(ship.Data)
			@shared.Footer()
		</body>
	</html>
}

templ ShipContent(ship openAPI.Ship) {
	<main>
		<h1>{ fmt.Sprint(ship.GetSymbol() + " - " + ship.GetNav().Route.Destination.Symbol) }</h1>
		<div id="ship-container">
			<h2>Details</h2>
			<p><b>Registration: </b>{ fmt.Sprint(ship.GetRegistration().Name) }</p>
			<p>
				<b>Nav: </b>
				if ship.GetNav().SystemSymbol != ship.GetNav().Route.Destination.SystemSymbol {
					<span>
						System: { fmt.Sprint(ship.GetNav().SystemSymbol) }
						<span class="material-symbols-outlined">
							arrow_forward
						</span>
						{ fmt.Sprintf("System: %s", ship.GetNav().Route.Destination.SystemSymbol) }
					</span>
				} else {
					<span>
						{ fmt.Sprintf("System: %s", ship.GetNav().SystemSymbol) }
						<span class="material-symbols-outlined">
							arrow_forward
						</span>
						{ fmt.Sprintf("%s", ship.GetNav().Status) }
					</span>
				}
			</p>
			<p><b>Crew: </b>{ fmt.Sprint(ship.GetCrew().Current) } / { fmt.Sprint(ship.GetCrew().Capacity) }</p>
			<p><b>Frame: </b>{ fmt.Sprint(ship.GetFrame().Name) }</p>
			<p><b>Reactor: </b>{ fmt.Sprint(ship.GetReactor().Name) }</p>
			<p><b>Engine: </b>{ fmt.Sprint(ship.GetEngine().Name) }</p>
			<p><b>Cooldown: </b>{ fmt.Sprint(ship.GetCooldown().RemainingSeconds) } seconds</p>
			<p>
				<h2>Cargo</h2>
				<p><b>Capacity: </b>{ fmt.Sprint(ship.Cargo.GetCapacity()) }</p>
				for _, good := range ship.Cargo.GetInventory() {
					<p><b>Good: </b>{ fmt.Sprint(good.GetSymbol()) }</p>
					<p><b>Quantity: </b>{ fmt.Sprint(good.GetUnits()) } / { fmt.Sprint(ship.Cargo.GetCapacity()) }</p>
				}
			</p>
			<p><b>Fuel: </b>{ fmt.Sprint(ship.GetFuel().Current) } / { fmt.Sprint(ship.GetFuel().Capacity) }</p>
		</div>
	</main>
}
